{"version":3,"sources":["Animal.js"],"names":["mongoose","require","config","connection","on","err","console","error","disconnect","log","connectWithRetry","connect","process","env","MONGO_DB_URL","useNewUrlParser","useUnifiedTopology","autoReconnect","reconnectTries","Number","MAX_VALUE","reconnectInterval","then","AnimalSchema","Schema","zoo","type","String","required","index","scientificName","commonName","givenName","gender","dateOfBirth","Date","age","isTransportable","Boolean","collection","timestamps","Animal","model","module","exports"],"mappings":";;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAMA,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAxB;;AACAA,OAAO,CAAC,QAAD,CAAP,CAAkBC,MAAlB,G,CAEA;;;AACAF,QAAQ,CAACG,UAAT,CAAoBC,EAApB,CAAuB,OAAvB,EAAgC,UAAAC,GAAG,EAAI;AACnCC,EAAAA,OAAO,CAACC,KAAR,CAAc,2BAAd,EAA2CF,GAA3C;AACAL,EAAAA,QAAQ,CAACQ,UAAT;AACH,CAHD;AAIAR,QAAQ,CAACG,UAAT,CAAoBC,EAApB,CAAuB,cAAvB,EAAuC,YAAM;AACzCE,EAAAA,OAAO,CAACG,GAAR,CAAY,kDAAZ;AACAC,EAAAA,gBAAgB;AACnB,CAHD;;AAKA,SAASA,gBAAT,GAA4B;AACxBV,EAAAA,QAAQ,CAACW,OAAT,CAAiBC,OAAO,CAACC,GAAR,CAAYC,YAA7B,EAA2C;AACvCC,IAAAA,eAAe,EAAE,IADsB;AAEvCC,IAAAA,kBAAkB,EAAE,IAFmB;AAGvCC,IAAAA,aAAa,EAAE,IAHwB;AAIvCC,IAAAA,cAAc,EAAEC,MAAM,CAACC,SAJgB;AAKvCC,IAAAA,iBAAiB,EAAE;AALoB,GAA3C,EAMGC,IANH,CAMQ,YAAM;AACVhB,IAAAA,OAAO,CAACG,GAAR,CAAY,sBAAZ;AACH,GARD,WAQS,UAAAJ,GAAG,EAAI;AACZC,IAAAA,OAAO,CAACC,KAAR,CAAc,mCAAd,EAAmDF,GAAnD;AACH,GAVD;AAWH,C,CAED;;;AACAK,gBAAgB,G,CAEhB;;AACA,IAAMa,YAAY,GAAG,IAAIvB,QAAQ,CAACwB,MAAb,CAAoB;AACrCC,EAAAA,GAAG,EAAE;AAAEC,IAAAA,IAAI,EAAEC,MAAR;AAAgBC,IAAAA,QAAQ,EAAE,IAA1B;AAAgCC,IAAAA,KAAK,EAAE;AAAvC,GADgC;AAErCC,EAAAA,cAAc,EAAE;AAAEJ,IAAAA,IAAI,EAAEC,MAAR;AAAgBC,IAAAA,QAAQ,EAAE,IAA1B;AAAgCC,IAAAA,KAAK,EAAE;AAAvC,GAFqB;AAGrCE,EAAAA,UAAU,EAAE;AAAEL,IAAAA,IAAI,EAAEC,MAAR;AAAgBC,IAAAA,QAAQ,EAAE;AAA1B,GAHyB;AAIrCI,EAAAA,SAAS,EAAE;AAAEN,IAAAA,IAAI,EAAEC,MAAR;AAAgBC,IAAAA,QAAQ,EAAE;AAA1B,GAJ0B;AAKrCK,EAAAA,MAAM,EAAE;AAAEP,IAAAA,IAAI,EAAEC,MAAR;AAAgBC,IAAAA,QAAQ,EAAE;AAA1B,GAL6B;AAMrCM,EAAAA,WAAW,EAAE;AAAER,IAAAA,IAAI,EAAES,IAAR;AAAcP,IAAAA,QAAQ,EAAE;AAAxB,GANwB;AAOrCQ,EAAAA,GAAG,EAAE;AAAEV,IAAAA,IAAI,EAAEP,MAAR;AAAgBS,IAAAA,QAAQ,EAAE;AAA1B,GAPgC;AAQrCS,EAAAA,eAAe,EAAE;AAAEX,IAAAA,IAAI,EAAEY,OAAR;AAAiBV,IAAAA,QAAQ,EAAE;AAA3B;AARoB,CAApB,EASlB;AACCW,EAAAA,UAAU,EAAE,SADb;AAECC,EAAAA,UAAU,EAAE,IAFb,CAEkB;;AAFlB,CATkB,CAArB,C,CAcA;;AACA,IAAMC,MAAM,GAAGzC,QAAQ,CAAC0C,KAAT,CAAe,QAAf,EAAyBnB,YAAzB,CAAf;AACAoB,MAAM,CAACC,OAAP,GAAiBH,MAAjB","sourcesContent":["\r\n//GROUP 4\r\n// Name:       Samuel Abraham & Sandeep Kumar\r\n// Student id: 100870571      & 100844683\r\n// Web Development -CSS\r\n// Durham college\r\n// 19/04/2024\r\n// LAB4\r\n// INFT2202\r\n// Student Final assignment\r\nconst mongoose = require('mongoose');\r\nrequire('dotenv').config();\r\n\r\n// Improved connection setup with auto-reconnect\r\nmongoose.connection.on('error', err => {\r\n    console.error('MongoDB connection error:', err);\r\n    mongoose.disconnect();\r\n});\r\nmongoose.connection.on('disconnected', () => {\r\n    console.log('MongoDB disconnected; attempting to reconnect...');\r\n    connectWithRetry();\r\n});\r\n\r\nfunction connectWithRetry() {\r\n    mongoose.connect(process.env.MONGO_DB_URL, {\r\n        useNewUrlParser: true,\r\n        useUnifiedTopology: true,\r\n        autoReconnect: true,\r\n        reconnectTries: Number.MAX_VALUE,\r\n        reconnectInterval: 1000\r\n    }).then(() => {\r\n        console.log('MongoDB is connected');\r\n    }).catch(err => {\r\n        console.error('MongoDB initial connection error:', err);\r\n    });\r\n}\r\n\r\n// Invoke initial connection\r\nconnectWithRetry();\r\n\r\n// Define an enhanced schema with indexes for faster query performance\r\nconst AnimalSchema = new mongoose.Schema({\r\n    zoo: { type: String, required: true, index: true },\r\n    scientificName: { type: String, required: true, index: true },\r\n    commonName: { type: String, required: true },\r\n    givenName: { type: String, required: true },\r\n    gender: { type: String, required: true },\r\n    dateOfBirth: { type: Date, required: true },\r\n    age: { type: Number, required: true },\r\n    isTransportable: { type: Boolean, required: true }\r\n}, {\r\n    collection: 'animals',\r\n    timestamps: true // Automatically adds createdAt and updatedAt timestamps\r\n});\r\n\r\n// Create model and export\r\nconst Animal = mongoose.model('Animal', AnimalSchema);\r\nmodule.exports = Animal;\r\n"],"file":"Animal.dev.js"}