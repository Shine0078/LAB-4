{"version":3,"sources":["app.js"],"names":["express","require","bodyParser","mongoose","dotenv","path","session","animal","config","app","connect","process","env","MONGODB_URI","useNewUrlParser","useUnifiedTopology","db","connection","on","console","error","bind","use","pug","json","urlencoded","extended","join","__dirname","secret","resave","saveUninitialized","set","get","req","res","render","title","next","err","Error","status","message","PORT","listen","log"],"mappings":"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","sourcesContent":["//GROUP 4\r\n// Name:       Samuel Abraham & Sandeep Kumar\r\n// Student id: 100870571      & 100844683\r\n// Web Development -CSS\r\n// Durham college\r\n// 19/04/2024\r\n// LAB4\r\n// INFT2202\r\n// Student Final assignment\r\n\r\n\r\n\r\n\r\nconst express = require('express');\r\nconst bodyParser = require('body-parser');\r\nconst mongoose = require('mongoose');\r\nconst dotenv = require('dotenv');\r\nconst path = require('path');\r\nconst session = require('express-session');\r\n\r\nconst animal = require('./routes/animal.router');\r\n\r\n\r\n// Load environment variables from .env file\r\ndotenv.config();\r\n\r\n// Create Express application\r\nconst app = express();\r\n\r\n// MongoDB connection\r\nmongoose.connect(process.env.MONGODB_URI, { useNewUrlParser: true, useUnifiedTopology: true });\r\nconst db = mongoose.connection;\r\ndb.on('error', console.error.bind(console, 'MongoDB connection error:'));\r\n\r\n// Use bodyParser middleware to parse JSON and url-encoded requests\r\napp.use(pug.json());\r\napp.use(express.urlencoded({ extended: true }));\r\n\r\n// Static folder\r\napp.use(express.static(path.join(__dirname, 'public')));\r\n\r\n// Session configuration\r\napp.use(session({\r\n    secret: 'secret',\r\n    resave: false,\r\n    saveUninitialized: true\r\n}));\r\n\r\n\r\n\r\n// Set view engine\r\napp.set('view engine', 'pug');\r\napp.set('views', path.join(__dirname, 'views'));\r\n\r\n// Define routes\r\napp.get('/', (req, res) => {\r\n    res.render('index', { title: 'Home' });\r\n});\r\n\r\n\r\n// Error handling\r\napp.use((req, res, next) => {\r\n    const err = new Error('Not Found');\r\n    err.status = 404;\r\n    next(err);\r\n});\r\n\r\napp.use((err, req, res, next) => {\r\n    res.status(err.status || 500);\r\n    res.render('error', {\r\n        message: err.message,\r\n        error: req.app.get('env') === 'development' ? err : {}\r\n    });\r\n});\r\n\r\n// Set the port and start the server\r\nconst PORT = process.env.PORT || 3000;\r\napp.listen(PORT, () => console.log(`Server started on port ${PORT}`));\r\n\r\n"],"file":"app.dev.js"}